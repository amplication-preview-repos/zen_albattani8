/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Wastage as PrismaWastage,
  RawMaterial as PrismaRawMaterial,
} from "@prisma/client";

export class WastageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WastageCountArgs, "select">): Promise<number> {
    return this.prisma.wastage.count(args);
  }

  async wastages(args: Prisma.WastageFindManyArgs): Promise<PrismaWastage[]> {
    return this.prisma.wastage.findMany(args);
  }
  async wastage(
    args: Prisma.WastageFindUniqueArgs
  ): Promise<PrismaWastage | null> {
    return this.prisma.wastage.findUnique(args);
  }
  async createWastage(args: Prisma.WastageCreateArgs): Promise<PrismaWastage> {
    return this.prisma.wastage.create(args);
  }
  async updateWastage(args: Prisma.WastageUpdateArgs): Promise<PrismaWastage> {
    return this.prisma.wastage.update(args);
  }
  async deleteWastage(args: Prisma.WastageDeleteArgs): Promise<PrismaWastage> {
    return this.prisma.wastage.delete(args);
  }

  async getRawMaterial(parentId: string): Promise<PrismaRawMaterial | null> {
    return this.prisma.wastage
      .findUnique({
        where: { id: parentId },
      })
      .rawMaterial();
  }
}
