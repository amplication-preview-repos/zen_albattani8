/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RawMaterial as PrismaRawMaterial,
  Inventory as PrismaInventory,
  Wastage as PrismaWastage,
} from "@prisma/client";

export class RawMaterialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RawMaterialCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rawMaterial.count(args);
  }

  async rawMaterials(
    args: Prisma.RawMaterialFindManyArgs
  ): Promise<PrismaRawMaterial[]> {
    return this.prisma.rawMaterial.findMany(args);
  }
  async rawMaterial(
    args: Prisma.RawMaterialFindUniqueArgs
  ): Promise<PrismaRawMaterial | null> {
    return this.prisma.rawMaterial.findUnique(args);
  }
  async createRawMaterial(
    args: Prisma.RawMaterialCreateArgs
  ): Promise<PrismaRawMaterial> {
    return this.prisma.rawMaterial.create(args);
  }
  async updateRawMaterial(
    args: Prisma.RawMaterialUpdateArgs
  ): Promise<PrismaRawMaterial> {
    return this.prisma.rawMaterial.update(args);
  }
  async deleteRawMaterial(
    args: Prisma.RawMaterialDeleteArgs
  ): Promise<PrismaRawMaterial> {
    return this.prisma.rawMaterial.delete(args);
  }

  async findInventories(
    parentId: string,
    args: Prisma.InventoryFindManyArgs
  ): Promise<PrismaInventory[]> {
    return this.prisma.rawMaterial
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inventories(args);
  }

  async findWastages(
    parentId: string,
    args: Prisma.WastageFindManyArgs
  ): Promise<PrismaWastage[]> {
    return this.prisma.rawMaterial
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wastages(args);
  }
}
